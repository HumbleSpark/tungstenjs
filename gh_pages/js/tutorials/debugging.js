window.data = window.data || {};
window.data.tutorials = window.data.tutorials || [];
window.data.tutorials.push({
  name: 'Debugging',
  steps: [
    {
      name: 'Debugging',
      index: 1,
      description_html: '<p><em>The first 90 percent fo the code accounts for the first 90 percent of the development time. The remaining 10 percent of the code accounts for the other 90 pecent of the development time</em><br />- Tom Cargill, Bell Labs</p><p>It can sometimes feel like you are 90 percent finished with the project at hand and that the remaining 10 percent should just be crossing the T\'s and dotting the I\'s. And then you realize that there are bugs in your program that might end up turning the last 10 percent into another 90 percent. The following examples will show you different classes of bugs you might encounter while working with JavaScript and Tungsten, and discuss how to find and fix them.</p><p>We will be using the derived properties app for these examples.</p><p>The first class of bugs is the simple syntax error. Find the error in the code and fix it. Pay attention to the error message in the App Area as well as any linting hints you might see. Note: Most editors have the capability to add and/or configure live linting for JavaScript to catch syntax errors of this sort.</p><p>Once you have found the error and fixed it, click the run button to verify that the app is now working as intended</p><p>The answer is below. Select text to reveal.</p><p style="color:#fff">There is an errant semicolon on line 32 in the events hash preventing the JS from being properly parsed.</p>',
      template: '<h2>Average Price Calculator</h2>\n<table class="pure-table pure-table-horizontal">\n  <thead>\n    <tr>\n      <th>Product</th>\n      <th>Price Slider</th>\n      <th>Price</th>\n    </tr>\n  </thead>\n  <tbody>\n    {{#products}}\n    <tr class="js-product">\n      <td>{{name}}</td>\n      <td><input class="js-price-edit" id="price" type="range" min="0" max="400" value="{{price}}"></td>\n      <td>${{price}}</td>\n    </tr>\n    {{/products}}\n    <tr>\n      <td><strong>Average</strong></td>\n      <td></td>\n      <td><strong>${{average_price}}</strong></td>\n    </tr>\n  </tbody>\n</table>',
      js: "var View = tungsten.View;\nvar Model = tungsten.Model;\nvar Collection = tungsten.Collection;\n\nvar AppModel = Model.extend({\n  relations: {\n    products: Collection\n  },\n  defaults: {\n    products: [\n      {'name': 'First Product', 'price': 350},\n      {'name': 'Second Product', 'price': 200}\n    ]\n  },\n  derived: {\n    average_price: {\n      deps: ['products'],\n      fn: function() {\n        var products = this.get('products');\n        var avg = products.reduce(function(sum, item) {\n          return sum + item.get('price');\n        }, 0) / products.size();\n\n        return Math.round(avg);\n      }\n    }\n  }\n});\n\nvar ProductView = View.extend({\n  events: {\n    'input .js-price-edit': 'modifyPrice';\n  },\n  modifyPrice: function(e) {\n    this.model.set('price', parseInt(e.currentTarget.value, 10));\n  }\n});\nvar AppView = View.extend({\n  childViews: {\n    'js-product': ProductView\n  }\n});\n\nnew AppView({\n  el: document.getElementById('app'),\n  template: compiledTemplates.app_view,\n  model: new AppModel(),\n  dynamicInitialize: true\n});"
    },
    {
      name: 'Debugging',
      index: 2,
      description_html: '<p>This one is a bit trickier. There are no visual clues to instantly alert you that there is a problem. Your app, however, is broken. Move the sliders and see for yourself that none of the values are updating.</p><p>You will be able to get a hint for what is wrong here if you take a look at your web console in your browser of choice. If you don\'t know how to do that, take some time now to do a quick web search to find out.</p><p>Once you figure out the issue, fix it and click the run button to verify that all the values update appropriately.</p><p>The answer is below. Select text to reveal.</p><p style="color:#fff">If you open the web console, you should see "Error: Method moidfyPrice does not exist". This method doesn\'t exist, of course, because it is misspelled. The events hash connects events with named callbacks. A misnamed callback will attempt to fire and throw an exception when there is no function by that name found.</p>',
      template: '<h2>Average Price Calculator</h2>\n<table class="pure-table pure-table-horizontal">\n  <thead>\n    <tr>\n      <th>Product</th>\n      <th>Price Slider</th>\n      <th>Price</th>\n    </tr>\n  </thead>\n  <tbody>\n    {{#products}}\n    <tr class="js-product">\n      <td>{{name}}</td>\n      <td><input class="js-price-edit" id="price" type="range" min="0" max="400" value="{{price}}"></td>\n      <td>${{price}}</td>\n    </tr>\n    {{/products}}\n    <tr>\n      <td><strong>Average</strong></td>\n      <td></td>\n      <td><strong>${{average_price}}</strong></td>\n    </tr>\n  </tbody>\n</table>',
      js: "var View = tungsten.View;\nvar Model = tungsten.Model;\nvar Collection = tungsten.Collection;\n\nvar AppModel = Model.extend({\n  relations: {\n    products: Collection\n  },\n  defaults: {\n    products: [\n      {'name': 'First Product', 'price': 350},\n      {'name': 'Second Product', 'price': 200}\n    ]\n  },\n  derived: {\n    average_price: {\n      deps: ['products'],\n      fn: function() {\n        var products = this.get('products');\n        var avg = products.reduce(function(sum, item) {\n          return sum + item.get('price');\n        }, 0) / products.size();\n\n        return Math.round(avg);\n      }\n    }\n  }\n});\n\nvar ProductView = View.extend({\n  events: {\n    'input .js-price-edit': 'moidfyPrice'\n  },\n  modifyPrice: function(e) {\n    this.model.set('price', parseInt(e.currentTarget.value, 10));\n  }\n});\nvar AppView = View.extend({\n  childViews: {\n    'js-product': ProductView\n  }\n});\n\nnew AppView({\n  el: document.getElementById('app'),\n  template: compiledTemplates.app_view,\n  model: new AppModel(),\n  dynamicInitialize: true\n});"
    },
    {
      name: 'Debugging',
      index: 3,
      description_html: '<p>Trying all the usual methods probably won\'t help you out this time. Thankfully all is not lost. Tungsten comes packaged with a debugger, which is enormously helpful.</p><p>Open the console and run "launchDebugger()". Click the large button that shows up on the screen and take a look at the debugger window that pops up. What do you notice? If you don\'t notice anything suspicious, go back to the previous step and launch the debugger. Do you see the difference?</p><p>Once you figure out the issue, fix it and click the run button to verify that all the values update appropriately.</p><p>The answer is below. Select text to reveal.</p><p style="color:#fff">If you ran the Tungsten debugger, you noticed that the app is only displaying one view, the app view. In the previous step we can see that we are missing two additional views (subviews). What views is our app declaring? We have an AppView and we are expecting some product views. The way to wire up the instances of ProductView is to add it to the childViews hash on our AppView. Looking at the childViews hash, we can see at line 40 that we have \'.js-product\': ProductView. The childViews hash expects "js-" prefixed class names to figure out what section of the template a view is responsible for. It takes the class name only and not a CSS selector. If you remove the period and click run, your app should run and you should be able to see the app view as well as the two product child views.</p>',
      template: '<h2>Average Price Calculator</h2>\n<table class="pure-table pure-table-horizontal">\n  <thead>\n    <tr>\n      <th>Product</th>\n      <th>Price Slider</th>\n      <th>Price</th>\n    </tr>\n  </thead>\n  <tbody>\n    {{#products}}\n    <tr class="js-product">\n      <td>{{name}}</td>\n      <td><input class="js-price-edit" id="price" type="range" min="0" max="400" value="{{price}}"></td>\n      <td>${{price}}</td>\n    </tr>\n    {{/products}}\n    <tr>\n      <td><strong>Average</strong></td>\n      <td></td>\n      <td><strong>${{average_price}}</strong></td>\n    </tr>\n  </tbody>\n</table>',
      js: "var View = tungsten.View;\nvar Model = tungsten.Model;\nvar Collection = tungsten.Collection;\n\nvar AppModel = Model.extend({\n  relations: {\n    products: Collection\n  },\n  defaults: {\n    products: [\n      {'name': 'First Product', 'price': 350},\n      {'name': 'Second Product', 'price': 200}\n    ]\n  },\n  derived: {\n    average_price: {\n      deps: ['products'],\n      fn: function() {\n        var products = this.get('products');\n        var avg = products.reduce(function(sum, item) {\n          return sum + item.get('price');\n        }, 0) / products.size();\n\n        return Math.round(avg);\n      }\n    }\n  }\n});\n\nvar ProductView = View.extend({\n  events: {\n    'input .js-price-edit': 'modifyPrice'\n  },\n  modifyPrice: function(e) {\n    this.model.set('price', parseInt(e.currentTarget.value, 10));\n  }\n});\nvar AppView = View.extend({\n  childViews: {\n    '.js-product': ProductView\n  }\n});\n\nnew AppView({\n  el: document.getElementById('app'),\n  template: compiledTemplates.app_view,\n  model: new AppModel(),\n  dynamicInitialize: true\n});"
    },
    {
      name: 'Debugging',
      index: 4,
      description_html: '<p>This example similarly shows no warnings or errors. The only outward sign that something is amiss is the blank average price field. A useful tip for debugging is to trace the problem backward from the obvious symptom. In this case the symptom is that the average price is not displaying and it is our job to find out why. Since there are no obvious linting errors showing and no errors printed on the page, let\'s open the console. No errors there either. Launch the debugger and take a look at the app view and the app data that are supposed to reference the average price. Find the placeholder for avg_price in the "Current Template" of the top-level view. Now click on "Data" in the header of the debugger. Look at the top-level model and see what should be supplying the value for the template and see if you can find out what\'s wrong and fix it.</p><p>The answer is below. Select text to reveal.</p><p style="color:#fff">When we looked at the template for the app view, we saw that the key for the average price was called avg_price. Then when we examine the top-level model to see what the data looks like, you should have noticed that there is a derived property in the attributes section named average_price. That is the problem. In order to be the data provider for a key in the template, the attribute must have the same name. Change the key in the derived hash to be avg_price or change the key in the template to be average_price. Either one would do the trick. Now click run and verify that the app works as expected</p>',
      template: '<h2>Average Price Calculator</h2>\n<table class="pure-table pure-table-horizontal">\n  <thead>\n    <tr>\n      <th>Product</th>\n      <th>Price Slider</th>\n      <th>Price</th>\n    </tr>\n  </thead>\n  <tbody>\n    {{#products}}\n    <tr class="js-product">\n      <td>{{name}}</td>\n      <td><input class="js-price-edit" id="price" type="range" min="0" max="400" value="{{price}}"></td>\n      <td>${{price}}</td>\n    </tr>\n    {{/products}}\n    <tr>\n      <td><strong>Average</strong></td>\n      <td></td>\n      <td><strong>${{avg_price}}</strong></td>\n    </tr>\n  </tbody>\n</table>',
      js: "var View = tungsten.View;\nvar Model = tungsten.Model;\nvar Collection = tungsten.Collection;\n\nvar AppModel = Model.extend({\n  relations: {\n    products: Collection\n  },\n  defaults: {\n    products: [\n      {'name': 'First Product', 'price': 350},\n      {'name': 'Second Product', 'price': 200}\n    ]\n  },\n  derived: {\n    average_price: {\n      deps: ['products'],\n      fn: function() {\n        var products = this.get('products');\n        var avg = products.reduce(function(sum, item) {\n          return sum + item.get('price');\n        }, 0) / products.size();\n\n        return Math.round(avg);\n      }\n    }\n  }\n});\n\nvar ProductView = View.extend({\n  events: {\n    'input .js-price-edit': 'modifyPrice'\n  },\n  modifyPrice: function(e) {\n    this.model.set('price', parseInt(e.currentTarget.value, 10));\n  }\n});\nvar AppView = View.extend({\n  childViews: {\n    'js-product': ProductView\n  }\n});\n\nnew AppView({\n  el: document.getElementById('app'),\n  template: compiledTemplates.app_view,\n  model: new AppModel(),\n  dynamicInitialize: true\n});"
    },
    {
      name: 'Debugging',
      index: 5,
      description_html: '<p>This example is very similar to the previous one. There are no errors in the console and the sliders are updating the product prices correctly. However, there is no average price displayed. Launch the Tungsten debugger and see if you can find out what\'s wrong. Comparing this example with the last one, notice that it isn\'t the same problem: the model attribute has the same name as the template placeholder. The only hint is this: Notice that there is not even a dollar sign where the average price should be.</p><p>The answer is below. Select text to reveal.</p><p style="color:#fff">Noticing that even the dollar sign is missing we give greater scrutiny to the template. Why isn\'t the template rendering the dollar sign, which is clearly there in the template markup (and not part of a placeholder)? Launching the debugger and looking at the top-level view we see that there is a section entitled "Difference From Current DOM". It is important to know that Tungsten uses a virtual DOM to track changes and update the true DOM when necessary with just the differences between the current DOM and the value of the virtual DOM with current model data and templates. Scrolling through the markup for the difference from current DOM shows that the current DOM doesn\'t even have the strong tags. The entire &lt;td&gt; is emtpy. Usually a DOM/VDOM mismatch is caused by something updating the dom manually outside of Tungsten. If there is an update to the DOM that Tungsten doesn\'t know about, it cannot update its VDOM appropriately and then things can quickly become unmanaged and fail. Looking closely at the code we find that some code was added on line 51 to remove the second &lt;strong&gt; element, the one surrounding the average_price placeholder. Remove this line and click run to ensure that the app runs again as expected.</p>',
      template: '<h2>Average Price Calculator</h2>\n<table class="pure-table pure-table-horizontal">\n  <thead>\n    <tr>\n      <th>Product</th>\n      <th>Price Slider</th>\n      <th>Price</th>\n    </tr>\n  </thead>\n  <tbody>\n    {{#products}}\n    <tr class="js-product">\n      <td>{{name}}</td>\n      <td><input class="js-price-edit" id="price" type="range" min="0" max="400" value="{{price}}"></td>\n      <td>${{price}}</td>\n    </tr>\n    {{/products}}\n    <tr>\n      <td><strong>Average</strong></td>\n      <td></td>\n      <td><strong>${{average_price}}</strong></td>\n    </tr>\n  </tbody>\n</table>',
      js: "var View = tungsten.View;\nvar Model = tungsten.Model;\nvar Collection = tungsten.Collection;\n\nvar AppModel = Model.extend({\n  relations: {\n    products: Collection\n  },\n  defaults: {\n    products: [\n      {'name': 'First Product', 'price': 350},\n      {'name': 'Second Product', 'price': 200}\n    ]\n  },\n  derived: {\n    average_price: {\n      deps: ['products'],\n      fn: function() {\n        var products = this.get('products');\n        var avg = products.reduce(function(sum, item) {\n          return sum + item.get('price');\n        }, 0) / products.size();\n\n        return Math.round(avg);\n      }\n    }\n  }\n});\n\nvar ProductView = View.extend({\n  events: {\n    'input .js-price-edit': 'modifyPrice'\n  },\n  modifyPrice: function(e) {\n    this.model.set('price', parseInt(e.currentTarget.value, 10));\n  }\n});\nvar AppView = View.extend({\n  childViews: {\n    'js-product': ProductView\n  }\n});\n\nnew AppView({\n  el: document.getElementById('app'),\n  template: compiledTemplates.app_view,\n  model: new AppModel(),\n  dynamicInitialize: true\n});\n\ndocument.getElementsByTagName('strong')[1].remove();"
    }
  ]
});
